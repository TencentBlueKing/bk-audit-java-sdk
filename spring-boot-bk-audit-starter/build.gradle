plugins {
    id "maven-publish"
    id "signing"
}

description = "Spring Boot Starter for Blueking Audit"

dependencies {
    implementation("org.springframework.boot:spring-boot-autoconfigure")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation("org.springframework:spring-web")
    implementation("org.aspectj:aspectjrt")
    implementation("org.aspectj:aspectjweaver")
    implementation("com.fasterxml.jackson.core:jackson-core")
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.fasterxml.jackson.core:jackson-annotations")
    implementation("com.fasterxml.jackson.module:jackson-module-jsonSchema")
    implementation("org.slf4j:slf4j-api")
    implementation("org.apache.commons:commons-lang3")
    implementation("commons-collections:commons-collections")
    implementation("org.apache.commons:commons-collections4")
    implementation("javax.servlet:javax.servlet-api")
    implementation("io.micrometer:micrometer-registry-prometheus:1.5.1")
    api(project(":bk-audit-java-sdk"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.springframework.boot:spring-boot-test")
    testImplementation("org.springframework.boot:spring-boot-test-autoconfigure")
    testImplementation("org.springframework:spring-test")
    testImplementation("org.springframework:spring-webmvc")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.yaml:snakeyaml:1.29")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    compileOnly("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.tencent.bk.sdk'
            version = project.property('version')
            artifactId = 'spring-boot-bk-audit-starter'

            from components.java

            artifact sourceJar
            artifact javadocJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'spring-boot-bk-audit-starter'
                description = 'Tencent BlueKing BK-Audit SDK spring boot starter'
                url = 'https://github.com/TencentBlueKing/bk-audit-java-sdk'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/TencentBlueKing/bk-audit-java-sdk/blob/master/License.txt'
                    }
                }
                developers {
                    developer {
                        id = 'bk-job'
                        name = 'bk-job'
                        email = 'bk-job@tencent.com'
                        roles = ['Manager']
                    }
                }
                scm {
                    url = 'https://github.com/TencentBlueKing/bk-audit-java-sdk'
                    connection = 'scm:git:https://github.com/TencentBlueKing/bk-audit-java-sdk.git'
                    developerConnection = 'scm:git:git@github.com:TencentBlueKing/bk-audit-java-sdk.git'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'MavenCentral'
            // 正式包
            def mavenRepoDeployUrl = System.getProperty("mavenRepoDeployUrl")
            def mavenRepoUsername = System.getProperty("mavenRepoUsername")
            def mavenRepoPassword = System.getProperty("mavenRepoPassword")

            if (mavenRepoDeployUrl == null || mavenRepoDeployUrl.trim().length() == 0) {
                // gradle.properties 中的 maven deploy repo
                mavenRepoDeployUrl = project.findProperty("MAVEN_REPO_DEPLOY_URL")
                mavenRepoUsername = project.findProperty("MAVEN_REPO_USERNAME")
                mavenRepoPassword = project.findProperty("MAVEN_REPO_PASSWORD")
            }

            // 快照包
            def snapshotMavenRepoDeployUrl = System.getProperty("snapshotMavenRepoDeployUrl")
            def snapshotMavenRepoUsername = System.getProperty("snapshotMavenRepoUsername")
            def snapshotMavenRepoPassword = System.getProperty("snapshotMavenRepoPassword")

            if (snapshotMavenRepoDeployUrl == null || snapshotMavenRepoDeployUrl.trim().length() == 0) {
                // gradle.properties 中的 snapshot maven deploy repo
                snapshotMavenRepoDeployUrl = project.findProperty("SNAPSHOT_MAVEN_REPO_DEPLOY_URL")
                snapshotMavenRepoUsername = project.findProperty("SNAPSHOT_MAVEN_REPO_USERNAME")
                snapshotMavenRepoPassword = project.findProperty("SNAPSHOT_MAVEN_REPO_PASSWORD")
            }

            def isSnapshot = project.property('version').toString().endsWith("SNAPSHOT")

            url = isSnapshot ? snapshotMavenRepoDeployUrl : mavenRepoDeployUrl
            println("Publish to url:" + url)
            credentials {
                username = isSnapshot ? snapshotMavenRepoUsername : mavenRepoUsername
                password = isSnapshot ? snapshotMavenRepoPassword : mavenRepoPassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

publish.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
generateMetadataFileForMavenJavaPublication.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
generatePomFileForMavenJavaPublication.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
publishMavenJavaPublicationToMavenCentralRepository.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
publishMavenJavaPublicationToMavenLocal.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
publishToMavenLocal.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
signMavenJavaPublication.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
